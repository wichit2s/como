**************************************************
โครงสร้างข้อมูล
**************************************************

ความรู้เกี่ยวกับโครงสร้างข้อมูลใน c++ เพื่อการแก้ปัญหา

ชุดข้อมูลแบบมีลำดับ
============================================================

`tuple`
------------------------------------------------------------

.. literalinclude:: code/tuple.cpp
   :linenos:
   :language: cpp


`array`
------------------------------------------------------------

.. literalinclude:: code/array.cpp
   :linenos:
   :language: cpp


`vector`
------------------------------------------------------------

.. literalinclude:: code/vector.cpp
   :linenos:
   :language: cpp

เซต
============================================================

`set`
------------------------------------------------------------

เก็บข้อมูลโดยใช้ balanced binary tree ทำให้ operation ส่วนใหญ่ :math:`O(log(n))` 

.. literalinclude:: code/set.cpp
   :linenos:
   :language: cpp

`unordered_set`
------------------------------------------------------------

เก็บข้อมูลโดยใช้ hash เข้าถึงข้อมูลโดยตรง ทำให้ operation ส่วนใหญ่ ใช้ :math:`O(n)` 

**exercise:** แปลงตัวอย่างเป็น `unordered_set`

แมพ 
============================================================

`map`
------------------------------------------------------------

เก็บข้อมูลโดยใช้ balanced binary tree ทำให้ operation ส่วนใหญ่ :math:`O(log(n))` 

.. literalinclude:: code/map.cpp
   :linenos:
   :language: cpp

`unordered_map`
------------------------------------------------------------

เก็บข้อมูลโดยใช้ hash เข้าถึงข้อมูลโดยตรง ทำให้ operation ส่วนใหญ่ ใช้ :math:`O(n)` 

**exercise:** แปลงตัวอย่างเป็น `unordered_map`

`bitset` 
============================================================

.. literalinclude:: code/bitset.cpp
   :linenos:
   :language: cpp


`deque` 
============================================================

.. literalinclude:: code/deque.cpp
   :linenos:
   :language: cpp

`stack` 
============================================================

.. literalinclude:: code/stack.cpp
   :linenos:
   :language: cpp

`queue` 
============================================================

.. literalinclude:: code/queue.cpp
   :linenos:
   :language: cpp

`priority_queue` 
============================================================

.. literalinclude:: code/priorityqueue.cpp
   :linenos:
   :language: cpp

